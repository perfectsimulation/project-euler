/*	Problem 12
	Highly Divisible Triangular Number

	The sequence of triangle numbers is generated by adding the natural numbers
	So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

	The first ten terms would be:
	1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

	Let us list the factors of the first seven triangle numbers:

	 1: 1
	 3: 1,3
	 6: 1,2,3,6
	10: 1,2,5,10
	15: 1,3,5,15
	21: 1,3,7,21
	28: 1,2,4,7,14,28
	We can see that 28 is the first triangle number to have over five divisors.

	What is the value of the first triangle number to have over 500 divisors?
*/

#include <iomanip>
#include <iostream>

using namespace std;

int getNumDivisors (double num) {
	int nDivisors = 0;
	// If num is odd, skip it.
	if (num / 2 != floor (num / 2)) {
		return 0;
	}

	for (int i = 1; i <= int(num); i++) {
		if (num / double(i) == floor (num / double(i))) {
			nDivisors++;
		}
	}

	// if (nDivisors > 150) {
	// 	cout << num <<  " has " << nDivisors << " divisors." << endl;
	// }

	return nDivisors;
}

int main () {
	int n = 0;	// Number of terms in the sequence of triangle numbers
	int numDivisors = 1;
	double triNum = 0;

	while (numDivisors < 500) {
		n++;
		int triNum_previous = triNum;
		triNum = triNum_previous + n;
		numDivisors = getNumDivisors (triNum);
	}

	cout << setprecision (0) << fixed;
	cout << triNum << endl;
}